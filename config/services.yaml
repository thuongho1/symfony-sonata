# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    sonata.admin.security.mask.builder.class: Sonata\AdminBundle\Security\Acl\Permission\MaskBuilder
    app.supported_locales: ['en', 'vi', 'ru']
    app.default_locale: 'vi'
    app.fallback_locales: ['en']
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']
    security.acl.permission.map:
        class: Sonata\AdminBundle\Security\Acl\Permission\AdminPermissionMap

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    admin_success_handler:
        class: App\Service\AuthenticationHandler
#    app.exception_listener:
#        class: App\EventListener\ExceptionListener
#        tags:
#            - {name: kernel.event_listener}
#    app.menu_listener:
#        class: App\EventListener\MenuBuilderListener
#        tags:
#            - { name: kernel.event_listener, event: sonata.admin.event.configure.menu.sidebar, method: addMenuItems }
#    sonata.user.admin.user:
#        class: App\Admin\UserAdmin
##        arguments: ~
##        tags:
##            - ~
##        public: true

    app.admin.category:
#        autowire: true
        class: App\Admin\CategoryAdmin
        arguments: [~, App\Entity\Category, ~]
#        calls:
#            - [ setTemplate, [ 'edit', 'cate`gory/edit.html.twig' ] ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Commerce', label: Category }
    app.admin.product:
        class: App\Admin\ProductAdmin
        arguments:
            - ~
            - App\Entity\Product
            - Yokai\SonataWorkflow\Controller\WorkflowController
        tags:
            - {name: sonata.admin, manager_type: orm, group: 'admin_commerce',  label: Product}
        public: true
    Yokai\SonataWorkflow\Controller\WorkflowController:
        autowire: true
        tags: ['controller.service_arguments']
    app.admin.extension.workflow.editorial:
        class: Yokai\SonataWorkflow\Admin\Extension\WorkflowExtension
        public: true
        arguments:
            - '@workflow.registry'
            - transitions_icons:
                  start_review: fa fa-question
                  interrupt_review: fa fa-edit
                  restart_review: fa fa-question
                  publish: fa fa-check
