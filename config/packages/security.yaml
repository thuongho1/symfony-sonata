security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        fos_userbundle:
            id: fos_user.user_provider.username
    encoders:
        FOS\UserBundle\Model\UserInterface: bcrypt
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # -> custom firewall for the admin area of the URL
        admin:
            pattern:            /admin(.*)
            context:            user
            form_login:
                provider:       fos_userbundle
                login_path:     /admin/login
                use_forward:    false
                check_path:     /admin/login_check
                failure_path:   null
                success_handler: admin_success_handler
            logout:
                path:           /admin/logout
                target:         /admin/login
            anonymous:          true
#            switch_user: true
        # -> end custom configuration

        # default login area for standard users

        # This firewall is used to handle the public login area
        # This part is handled by the FOS User Bundle
        main:
            pattern:             .*
            context:             user
            form_login:
                provider:       fos_userbundle
                login_path:     /login
                use_forward:    false
                check_path:     /login_check
                failure_path:   null
            logout:             true
            anonymous:          true
            # https://symfony.com/doc/current/security/impersonating_user.html
            #switch_user: true
#    role_hierarchy:
#        ROLE_ADMIN: [ ROLE_USER, ROLE_SONATA_ADMIN ]
#        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
#        SONATA:
#            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT  # if you are using acl then this line must be commented
#
#    # Easy way to control access for large sections of your site
#    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # Admin login page needs to be accessed without credential
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: [ ROLE_USER, ROLE_SONATA_ADMIN ] }
        - { path: ^/.*, role: ROLE_USER }
#    access_control:
#
#        # The WDT has to be allowed to anonymous users to avoid requiring the login with the AJAX request
#        - { path: ^/wdt/, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/profiler/, role: IS_AUTHENTICATED_ANONYMOUSLY }
#
#        # AsseticBundle paths used when using the controller for assets
#        - { path: ^/js/, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/css/, role: IS_AUTHENTICATED_ANONYMOUSLY }
#
#        # URL of FOSUserBundle which need to be available to anonymous users
#        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY } # for the case of a failed login
#        - { path: ^/user/new$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/user/check-confirmation-email$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/user/confirm/, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/user/confirmed$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/user/request-reset-password$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/user/send-resetting-email$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/user/check-resetting-email$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/user/reset-password/, role: IS_AUTHENTICATED_ANONYMOUSLY }
#
#        # Secured part of the site
#        # This config requires being logged for the whole site and having the admin role for the admin part.
#        # Change these rules to adapt them to your needs
#        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
#        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }

    # Sonata "special" roles (ROLE_SONATA_ADMIN and ROLE_SUPER_ADMIN) are configurable
    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
#
#    acl:
#        connection: default
